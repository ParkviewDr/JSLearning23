"use strict";
/*
console.log(this);

const calcAge = function(birthYear) {
    console.log(2037 - birthYear);
    console.log(this);
};
calcAge(1991);


const calcAgeArrow = birthYear => {
    console.log(2037 - birthYear);
    console.log(this);
};
calcAgeArrow(1980);

//arrow function doesn't get it's own "this" keyword, it points to the global scope "this"


const jonas = {
    year: 1991,
    calcAge: function() {
        console.log(this);
        console.log(this.year - 1980 + ' years old.');
    }
}
jonas.calcAge();

const matilda = {
    year: 2017,
};

matilda.calcAge = jonas.calcAge;
matilda.calcAge();

const f = jonas.calcAge;
f(); 

var firstName = 'Matilda';

const jonas = {
    firstName: 'Jonas',
    year: 1996,
    calcAge: function() {
        console.log(this)
        
        /* Solution 1 
        const self = this;
        const isMillenial = function() {
            console.log(self.year >= 1981 && self.year <= 1996);
        };

        Solution 2 
         
        const isMillenial = () => {
            console.log(this.year >= 1981 && this.year <= 1996);
        };

        isMillenial();
    },
/* don't use arrow function inside methods 
    greet: () => {
        console.log(`Hey ${this.firstName}`)
        console.log(`Hey ${this.firstName}`);
},
};
jonas.greet();
jonas.calcAge();

//argument keyword

const addExp = function (a, b) {
    console.log(arguments);
    return a + b;

};
addExp(2, 5);
addExp(2,5);

var addArrow = (a, b) => a + b;




let age = 30;
let oldAge = age;
age = 31; 
console.log(age);
console.log(oldAge);

const me = {
    name: 'Jonas',
    age: 30,

};

const friend = me;
friend.age = 27;
console.log('Friend:', friend);
console.log('Me', me);


the object will inherit the new value of 27 in age because it is in the the 
reference heap 
*/




